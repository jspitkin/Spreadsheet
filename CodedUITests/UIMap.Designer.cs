// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// B2SetTo20 - Use 'B2SetTo20ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void B2SetTo20()
        {
            #region Variable Declarations
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueBox' text box equals '20'
            Assert.AreEqual(this.B2SetTo20ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);
        }
        
        /// <summary>
        /// A1SetToHelloWorld - Use 'A1SetToHelloWorldParams' to pass parameters into this method.
        /// </summary>
        public void A1SetToHelloWorld()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIOKButton = this.UISpreadsheetclosingWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.A1SetToHelloWorldParams.UISpreadsheetWindowExePath, this.A1SetToHelloWorldParams.UISpreadsheetWindowAlternateExePath);

            // Type 'Hello World!' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.A1SetToHelloWorldParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.A1SetToHelloWorldParams.UIContentsBoxEditSendKeys, ModifierKeys.None);
            
            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(51, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(60, 13));
        }
        
        /// <summary>
        /// Sets cell A1 to "Hello World!"
        /// </summary>
        public void SetCellA1()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.SetCellA1Params.UISpreadsheetWindowExePath, this.SetCellA1Params.UISpreadsheetWindowAlternateExePath);

            // Type 'Hello World!' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SetCellA1Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SetCellA1Params.UIContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SetCell1 - Use 'SetCell1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SetCell1()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello World!'
            Assert.AreEqual(this.SetCell1ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals 'Hello World!'
            Assert.AreEqual(this.SetCell1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'A1'
            Assert.AreEqual(this.SetCell1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// SetCell2 - Use 'SetCell2Params' to pass parameters into this method.
        /// </summary>
        public void SetCell2()
        {
            #region Variable Declarations
            WinWindow uIContentsBoxWindow = this.UISpreadsheetWindow.UIInputBoxWindow.UIContentsBoxWindow;
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetGridClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.SetCell2Params.UISpreadsheetWindowExePath, this.SetCell2Params.UISpreadsheetWindowAlternateExePath);

            // Click 'ContentsBox' window
            Mouse.Click(uIContentsBoxWindow, new Point(60, 18));

            // Type '10' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SetCell2Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SetCell2Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(131, 43));

            // Type '=A1 / 2' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SetCell2Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SetCell2Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// SetCell3 - Use 'SetCell3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SetCell3()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '=A1 / 2'
            Assert.AreEqual(this.SetCell3ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals '5'
            Assert.AreEqual(this.SetCell3ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'B1'
            Assert.AreEqual(this.SetCell3ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// LoadFile - Use 'LoadFileParams' to pass parameters into this method.
        /// </summary>
        public void LoadFile()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetGridClient;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIProjectsTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIProjectsTreeItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIPS6ListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow1.UIResourcesListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow2.UILoadTestListItem.UINameEdit;
            WinButton uIOKButton = this.UISpreadsheetclosingWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.LoadFileParams.UISpreadsheetWindowExePath, this.LoadFileParams.UISpreadsheetWindowAlternateExePath);

            // Type 'blah' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.LoadFileParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.LoadFileParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(159, 29));

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(170, 42));

            // Type 'blah' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.LoadFileParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.LoadFileParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(204, 57));

            // Type 'blah' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.LoadFileParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.LoadFileParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'File' -> 'Open...' menu item
            Mouse.Click(uIOpenMenuItem, new Point(43, 12));

            // Click 'Favorites' -> 'Projects' tree item
            Mouse.Click(uIProjectsTreeItem, new Point(14, 15));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(19, 0));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(45, 16));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(10, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 8));
        }
        
        /// <summary>
        /// LoadFile1 - Use 'LoadFile1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoadFile1()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'file'
            Assert.AreEqual(this.LoadFile1ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals 'file'
            Assert.AreEqual(this.LoadFile1ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'C1'
            Assert.AreEqual(this.LoadFile1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// SetCell4 - Use 'SetCell4Params' to pass parameters into this method.
        /// </summary>
        public void SetCell4()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UILoadTestListItem.UINameEdit;
            WinButton uIOKButton = this.UISpreadsheetclosingWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetGridClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.SetCell4Params.UISpreadsheetWindowExePath, this.SetCell4Params.UISpreadsheetWindowAlternateExePath);

            // Type '400' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.SetCell4Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.SetCell4Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open...' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(46, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(28, 5));

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(217, 41));
        }
        
        /// <summary>
        /// LoadFile2 - Use 'LoadFile2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoadFile2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals 'file'
            Assert.AreEqual(this.LoadFile2ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals 'file'
            Assert.AreEqual(this.LoadFile2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'C1'
            Assert.AreEqual(this.LoadFile2ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// FormulaError - Use 'FormulaErrorParams' to pass parameters into this method.
        /// </summary>
        public void FormulaError()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIFileMenuItem;
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow.UISpreadsheetTitleBar;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.FormulaErrorParams.UISpreadsheetWindowExePath, this.FormulaErrorParams.UISpreadsheetWindowAlternateExePath);

            // Type '=A2 + 10' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaErrorParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaErrorParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(26, 0));

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(391, 7));
        }
        
        /// <summary>
        /// FormulaError2 - Use 'FormulaError2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FormulaError2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '=A2 + 10'
            Assert.AreEqual(this.FormulaError2ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals 'Formula Error'
            Assert.AreEqual(this.FormulaError2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'A1'
            Assert.AreEqual(this.FormulaError2ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// FormulaError3 - Use 'FormulaError3Params' to pass parameters into this method.
        /// </summary>
        public void FormulaError3()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetGridClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.FormulaError3Params.UISpreadsheetWindowExePath, this.FormulaError3Params.UISpreadsheetWindowAlternateExePath);

            // Type '=A2' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaError3Params.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaError3Params.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(68, 54));

            // Type '=B3' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaError3Params.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaError3Params.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(171, 76));

            // Type '10' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.FormulaError3Params.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.FormulaError3Params.UIContentsBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// FormulaError4 - Use 'FormulaError4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FormulaError4()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '10'
            Assert.AreEqual(this.FormulaError4ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals '10'
            Assert.AreEqual(this.FormulaError4ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'B3'
            Assert.AreEqual(this.FormulaError4ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// ManyWindows - Use 'ManyWindowsParams' to pass parameters into this method.
        /// </summary>
        public void ManyWindows()
        {
            #region Variable Declarations
            WinMenuItem uIViewHelpMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIHelpMenuItem.UIViewHelpMenuItem;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetWindow1.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow2.UIMenuBarMenuBar.UIFileMenuItem;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow2.UISpreadsheetGridWindow.UISpreadsheetGridClient;
            WinClient uISpreadsheetGridClient1 = this.UISpreadsheetWindow3.UISpreadsheetGridWindow.UISpreadsheetGridClient;
            WinClient uISpreadsheetGridClient2 = this.UISpreadsheetWindow4.UISpreadsheetGridWindow.UISpreadsheetGridClient;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinClient uISpreadsheetGridClient3 = this.UISpreadsheetWindow4.UIItemWindow.UISpreadsheetGridClient;
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow4.UIContentsBoxWindow.UIContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ManyWindowsParams.UISpreadsheetWindowExePath, this.ManyWindowsParams.UISpreadsheetWindowAlternateExePath);

            // Click 'Help' -> 'View Help' menu item
            Mouse.Click(uIViewHelpMenuItem, new Point(56, 15));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(43, 6));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(27, 6));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(24, 11));

            // Type '{CapsLock}N{CapsLock}' in 'spreadsheetGrid' client
            Keyboard.SendKeys(uISpreadsheetGridClient, this.ManyWindowsParams.UISpreadsheetGridClientSendKeys, ModifierKeys.None);

            // Type 'Control + n' in 'spreadsheetGrid' client
            Keyboard.SendKeys(uISpreadsheetGridClient, this.ManyWindowsParams.UISpreadsheetGridClientSendKeys1, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetGrid' client
            Keyboard.SendKeys(uISpreadsheetGridClient1, this.ManyWindowsParams.UISpreadsheetGridClientSendKeys2, ModifierKeys.Control);

            // Type 'Control + n' in 'spreadsheetGrid' client
            Keyboard.SendKeys(uISpreadsheetGridClient2, this.ManyWindowsParams.UISpreadsheetGridClientSendKeys3, ModifierKeys.Control);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 7));

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient3, new Point(277, 32));

            // Type '20' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ManyWindowsParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ManyWindowsParams.UIContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ManyWindows2 - Use 'ManyWindows2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ManyWindows2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow4.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow4.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow4.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals '20'
            Assert.AreEqual(this.ManyWindows2ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals '20'
            Assert.AreEqual(this.ManyWindows2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'D1'
            Assert.AreEqual(this.ManyWindows2ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        /// <summary>
        /// Clear - Use 'ClearParams' to pass parameters into this method.
        /// </summary>
        public void Clear()
        {
            #region Variable Declarations
            WinWindow uIContentsBoxWindow = this.UISpreadsheetWindow.UIInputBoxWindow.UIContentsBoxWindow;
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinClient uISpreadsheetGridClient = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetGridClient;
            WinMenuItem uIClearMenuItem = this.UISpreadsheetWindow.UIMenuBarMenuBar.UIEditMenuItem.UIClearMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ClearParams.UISpreadsheetWindowExePath, this.ClearParams.UISpreadsheetWindowAlternateExePath);

            // Click 'ContentsBox' window
            Mouse.Click(uIContentsBoxWindow, new Point(102, -1));

            // Type 'data' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(140, 45));

            // Type 'data' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText1;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(241, 42));

            // Type 'so much' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText2;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(298, 37));

            // Type 'important' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText3;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(444, 192));

            // Type 'data' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText4;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys4, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(148, 238));

            // Type 'it's about to go away' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText5;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys5, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(245, 239));

            // Type 'real fast' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText6;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys6, ModifierKeys.None);

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(330, 243));

            // Type ' :( :(' in 'ContentsBox' text box
            uIContentsBoxEdit.Text = this.ClearParams.UIContentsBoxEditText7;

            // Type '{Enter}' in 'ContentsBox' text box
            Keyboard.SendKeys(uIContentsBoxEdit, this.ClearParams.UIContentsBoxEditSendKeys7, ModifierKeys.None);

            // Click 'Edit' -> 'Clear' menu item
            Mouse.Click(uIClearMenuItem, new Point(44, 17));

            // Click 'spreadsheetGrid' client
            Mouse.Click(uISpreadsheetGridClient, new Point(233, 156));
        }
        
        /// <summary>
        /// Clear2 - Use 'Clear2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Clear2()
        {
            #region Variable Declarations
            WinEdit uIContentsBoxEdit = this.UISpreadsheetWindow.UIContentsBoxWindow.UIContentsBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentsBox' text box equals ''
            Assert.AreEqual(this.Clear2ExpectedValues.UIContentsBoxEditText, uIContentsBoxEdit.Text);

            // Verify that the 'Text' property of 'ValueBox' text box equals ''
            Assert.AreEqual(this.Clear2ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that the 'Text' property of 'CellNameBox' text box equals 'C7'
            Assert.AreEqual(this.Clear2ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);
        }
        
        #region Properties
        public virtual B2SetTo20ExpectedValues B2SetTo20ExpectedValues
        {
            get
            {
                if ((this.mB2SetTo20ExpectedValues == null))
                {
                    this.mB2SetTo20ExpectedValues = new B2SetTo20ExpectedValues();
                }
                return this.mB2SetTo20ExpectedValues;
            }
        }
        
        public virtual A1SetToHelloWorldParams A1SetToHelloWorldParams
        {
            get
            {
                if ((this.mA1SetToHelloWorldParams == null))
                {
                    this.mA1SetToHelloWorldParams = new A1SetToHelloWorldParams();
                }
                return this.mA1SetToHelloWorldParams;
            }
        }
        
        public virtual SetCellA1Params SetCellA1Params
        {
            get
            {
                if ((this.mSetCellA1Params == null))
                {
                    this.mSetCellA1Params = new SetCellA1Params();
                }
                return this.mSetCellA1Params;
            }
        }
        
        public virtual SetCell1ExpectedValues SetCell1ExpectedValues
        {
            get
            {
                if ((this.mSetCell1ExpectedValues == null))
                {
                    this.mSetCell1ExpectedValues = new SetCell1ExpectedValues();
                }
                return this.mSetCell1ExpectedValues;
            }
        }
        
        public virtual SetCell2Params SetCell2Params
        {
            get
            {
                if ((this.mSetCell2Params == null))
                {
                    this.mSetCell2Params = new SetCell2Params();
                }
                return this.mSetCell2Params;
            }
        }
        
        public virtual SetCell3ExpectedValues SetCell3ExpectedValues
        {
            get
            {
                if ((this.mSetCell3ExpectedValues == null))
                {
                    this.mSetCell3ExpectedValues = new SetCell3ExpectedValues();
                }
                return this.mSetCell3ExpectedValues;
            }
        }
        
        public virtual LoadFileParams LoadFileParams
        {
            get
            {
                if ((this.mLoadFileParams == null))
                {
                    this.mLoadFileParams = new LoadFileParams();
                }
                return this.mLoadFileParams;
            }
        }
        
        public virtual LoadFile1ExpectedValues LoadFile1ExpectedValues
        {
            get
            {
                if ((this.mLoadFile1ExpectedValues == null))
                {
                    this.mLoadFile1ExpectedValues = new LoadFile1ExpectedValues();
                }
                return this.mLoadFile1ExpectedValues;
            }
        }
        
        public virtual SetCell4Params SetCell4Params
        {
            get
            {
                if ((this.mSetCell4Params == null))
                {
                    this.mSetCell4Params = new SetCell4Params();
                }
                return this.mSetCell4Params;
            }
        }
        
        public virtual LoadFile2ExpectedValues LoadFile2ExpectedValues
        {
            get
            {
                if ((this.mLoadFile2ExpectedValues == null))
                {
                    this.mLoadFile2ExpectedValues = new LoadFile2ExpectedValues();
                }
                return this.mLoadFile2ExpectedValues;
            }
        }
        
        public virtual FormulaErrorParams FormulaErrorParams
        {
            get
            {
                if ((this.mFormulaErrorParams == null))
                {
                    this.mFormulaErrorParams = new FormulaErrorParams();
                }
                return this.mFormulaErrorParams;
            }
        }
        
        public virtual FormulaError2ExpectedValues FormulaError2ExpectedValues
        {
            get
            {
                if ((this.mFormulaError2ExpectedValues == null))
                {
                    this.mFormulaError2ExpectedValues = new FormulaError2ExpectedValues();
                }
                return this.mFormulaError2ExpectedValues;
            }
        }
        
        public virtual FormulaError3Params FormulaError3Params
        {
            get
            {
                if ((this.mFormulaError3Params == null))
                {
                    this.mFormulaError3Params = new FormulaError3Params();
                }
                return this.mFormulaError3Params;
            }
        }
        
        public virtual FormulaError4ExpectedValues FormulaError4ExpectedValues
        {
            get
            {
                if ((this.mFormulaError4ExpectedValues == null))
                {
                    this.mFormulaError4ExpectedValues = new FormulaError4ExpectedValues();
                }
                return this.mFormulaError4ExpectedValues;
            }
        }
        
        public virtual ManyWindowsParams ManyWindowsParams
        {
            get
            {
                if ((this.mManyWindowsParams == null))
                {
                    this.mManyWindowsParams = new ManyWindowsParams();
                }
                return this.mManyWindowsParams;
            }
        }
        
        public virtual ManyWindows2ExpectedValues ManyWindows2ExpectedValues
        {
            get
            {
                if ((this.mManyWindows2ExpectedValues == null))
                {
                    this.mManyWindows2ExpectedValues = new ManyWindows2ExpectedValues();
                }
                return this.mManyWindows2ExpectedValues;
            }
        }
        
        public virtual ClearParams ClearParams
        {
            get
            {
                if ((this.mClearParams == null))
                {
                    this.mClearParams = new ClearParams();
                }
                return this.mClearParams;
            }
        }
        
        public virtual Clear2ExpectedValues Clear2ExpectedValues
        {
            get
            {
                if ((this.mClear2ExpectedValues == null))
                {
                    this.mClear2ExpectedValues = new Clear2ExpectedValues();
                }
                return this.mClear2ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISpreadsheetclosingWindow UISpreadsheetclosingWindow
        {
            get
            {
                if ((this.mUISpreadsheetclosingWindow == null))
                {
                    this.mUISpreadsheetclosingWindow = new UISpreadsheetclosingWindow();
                }
                return this.mUISpreadsheetclosingWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UISpreadsheetWindow2 UISpreadsheetWindow2
        {
            get
            {
                if ((this.mUISpreadsheetWindow2 == null))
                {
                    this.mUISpreadsheetWindow2 = new UISpreadsheetWindow2();
                }
                return this.mUISpreadsheetWindow2;
            }
        }
        
        public UISpreadsheetWindow3 UISpreadsheetWindow3
        {
            get
            {
                if ((this.mUISpreadsheetWindow3 == null))
                {
                    this.mUISpreadsheetWindow3 = new UISpreadsheetWindow3();
                }
                return this.mUISpreadsheetWindow3;
            }
        }
        
        public UISpreadsheetWindow4 UISpreadsheetWindow4
        {
            get
            {
                if ((this.mUISpreadsheetWindow4 == null))
                {
                    this.mUISpreadsheetWindow4 = new UISpreadsheetWindow4();
                }
                return this.mUISpreadsheetWindow4;
            }
        }
        #endregion
        
        #region Fields
        private B2SetTo20ExpectedValues mB2SetTo20ExpectedValues;
        
        private A1SetToHelloWorldParams mA1SetToHelloWorldParams;
        
        private SetCellA1Params mSetCellA1Params;
        
        private SetCell1ExpectedValues mSetCell1ExpectedValues;
        
        private SetCell2Params mSetCell2Params;
        
        private SetCell3ExpectedValues mSetCell3ExpectedValues;
        
        private LoadFileParams mLoadFileParams;
        
        private LoadFile1ExpectedValues mLoadFile1ExpectedValues;
        
        private SetCell4Params mSetCell4Params;
        
        private LoadFile2ExpectedValues mLoadFile2ExpectedValues;
        
        private FormulaErrorParams mFormulaErrorParams;
        
        private FormulaError2ExpectedValues mFormulaError2ExpectedValues;
        
        private FormulaError3Params mFormulaError3Params;
        
        private FormulaError4ExpectedValues mFormulaError4ExpectedValues;
        
        private ManyWindowsParams mManyWindowsParams;
        
        private ManyWindows2ExpectedValues mManyWindows2ExpectedValues;
        
        private ClearParams mClearParams;
        
        private Clear2ExpectedValues mClear2ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISpreadsheetclosingWindow mUISpreadsheetclosingWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UISpreadsheetWindow2 mUISpreadsheetWindow2;
        
        private UISpreadsheetWindow3 mUISpreadsheetWindow3;
        
        private UISpreadsheetWindow4 mUISpreadsheetWindow4;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'B2SetTo20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class B2SetTo20ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals '20'
        /// </summary>
        public string UIValueBoxEditText = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'A1SetToHelloWorld'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class A1SetToHelloWorldParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Hello World!' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello World!";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCellA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetCellA1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Hello World!' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "Hello World!";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCell1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetCell1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'Hello World!'
        /// </summary>
        public string UIContentsBoxEditText = "Hello World!";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals 'Hello World!'
        /// </summary>
        public string UIValueBoxEditText = "Hello World!";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCell2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetCell2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '10' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1 / 2' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "=A1 / 2";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCell3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetCell3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '=A1 / 2'
        /// </summary>
        public string UIContentsBoxEditText = "=A1 / 2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals '5'
        /// </summary>
        public string UIValueBoxEditText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'B1'
        /// </summary>
        public string UICellNameBoxEditText = "B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LoadFileParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'blah' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "blah";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'blah' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "blah";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'blah' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "blah";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFile1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LoadFile1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'file'
        /// </summary>
        public string UIContentsBoxEditText = "file";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals 'file'
        /// </summary>
        public string UIValueBoxEditText = "file";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'C1'
        /// </summary>
        public string UICellNameBoxEditText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCell4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetCell4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '400' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "400";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadFile2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LoadFile2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals 'file'
        /// </summary>
        public string UIContentsBoxEditText = "file";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals 'file'
        /// </summary>
        public string UIValueBoxEditText = "file";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'C1'
        /// </summary>
        public string UICellNameBoxEditText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A2 + 10' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "=A2 + 10";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaError2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '=A2 + 10'
        /// </summary>
        public string UIContentsBoxEditText = "=A2 + 10";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals 'Formula Error'
        /// </summary>
        public string UIValueBoxEditText = "Formula Error";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaError3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A2' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=B3' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "=B3";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaError4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaError4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '10'
        /// </summary>
        public string UIContentsBoxEditText = "10";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals '10'
        /// </summary>
        public string UIValueBoxEditText = "10";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'B3'
        /// </summary>
        public string UICellNameBoxEditText = "B3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ManyWindows'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ManyWindowsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{CapsLock}N{CapsLock}' in 'spreadsheetGrid' client
        /// </summary>
        public string UISpreadsheetGridClientSendKeys = "{CapsLock}N{CapsLock}";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetGrid' client
        /// </summary>
        public string UISpreadsheetGridClientSendKeys1 = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetGrid' client
        /// </summary>
        public string UISpreadsheetGridClientSendKeys2 = "n";
        
        /// <summary>
        /// Type 'Control + n' in 'spreadsheetGrid' client
        /// </summary>
        public string UISpreadsheetGridClientSendKeys3 = "n";
        
        /// <summary>
        /// Type '20' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "20";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ManyWindows2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ManyWindows2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals '20'
        /// </summary>
        public string UIContentsBoxEditText = "20";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals '20'
        /// </summary>
        public string UIValueBoxEditText = "20";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'D1'
        /// </summary>
        public string UICellNameBoxEditText = "D1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Clear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ClearParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'data' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText = "data";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'data' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText1 = "data";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'so much' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText2 = "so much";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'important' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText3 = "important";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'data' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText4 = "data";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type 'it's about to go away' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText5 = "it\'s about to go away";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type 'real fast' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText6 = "real fast";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type ' :( :(' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditText7 = " :( :(";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentsBox' text box
        /// </summary>
        public string UIContentsBoxEditSendKeys7 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Clear2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Clear2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentsBox' text box equals ''
        /// </summary>
        public string UIContentsBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueBox' text box equals ''
        /// </summary>
        public string UIValueBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameBox' text box equals 'C7'
        /// </summary>
        public string UICellNameBoxEditText = "C7";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UIContentsBoxWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIInputBoxWindow UIInputBoxWindow
        {
            get
            {
                if ((this.mUIInputBoxWindow == null))
                {
                    this.mUIInputBoxWindow = new UIInputBoxWindow(this);
                }
                return this.mUIInputBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private UIContentsBoxWindow mUIContentsBoxWindow;
        
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UIA1Window mUIA1Window;
        
        private UIInputBoxWindow mUIInputBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUIValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIContentsBoxWindow : WinWindow
    {
        
        public UIContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentsBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUIContentsBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar : WinMenuBar
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIEditMenuItem mUIEditMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open...";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New      ";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewHelpMenuItem
        {
            get
            {
                if ((this.mUIViewHelpMenuItem == null))
                {
                    this.mUIViewHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View Help";
                    this.mUIViewHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIViewHelpMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIViewHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIClearMenuItem
        {
            get
            {
                if ((this.mUIClearMenuItem == null))
                {
                    this.mUIClearMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIClearMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Clear";
                    this.mUIClearMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIClearMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIClearMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIClearMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell:";
                    this.mUICellNameBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInputBoxWindow : WinWindow
    {
        
        public UIInputBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "InputBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIContentsBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Contents:";
                    this.mUIContentsBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIContentsBoxWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentsBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIContentsBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetGridClient
        {
            get
            {
                if ((this.mUISpreadsheetGridClient == null))
                {
                    this.mUISpreadsheetGridClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetGridClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetGridClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetclosingWindow : WinWindow
    {
        
        public UISpreadsheetclosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet closing");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Spreadsheet closing");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Spreadsheet closing");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIProjectsTreeItem
        {
            get
            {
                if ((this.mUIProjectsTreeItem == null))
                {
                    this.mUIProjectsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIProjectsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Projects";
                    this.mUIProjectsTreeItem.SearchProperties["Value"] = "1";
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProjectsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIProjectsTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIProjectsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIProjectsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIPS6ListItem UIPS6ListItem
        {
            get
            {
                if ((this.mUIPS6ListItem == null))
                {
                    this.mUIPS6ListItem = new UIPS6ListItem(this);
                }
                return this.mUIPS6ListItem;
            }
        }
        
        public UILoadTestListItem UILoadTestListItem
        {
            get
            {
                if ((this.mUILoadTestListItem == null))
                {
                    this.mUILoadTestListItem = new UILoadTestListItem(this);
                }
                return this.mUILoadTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6ListItem mUIPS6ListItem;
        
        private UILoadTestListItem mUILoadTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPS6ListItem : WinListItem
    {
        
        public UIPS6ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS6";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILoadTestListItem : WinListItem
    {
        
        public UILoadTestListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "LoadTest";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIResourcesListItem UIResourcesListItem
        {
            get
            {
                if ((this.mUIResourcesListItem == null))
                {
                    this.mUIResourcesListItem = new UIResourcesListItem(this);
                }
                return this.mUIResourcesListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIResourcesListItem mUIResourcesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIResourcesListItem : WinListItem
    {
        
        public UIResourcesListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UILoadTestListItem1 UILoadTestListItem
        {
            get
            {
                if ((this.mUILoadTestListItem == null))
                {
                    this.mUILoadTestListItem = new UILoadTestListItem1(this);
                }
                return this.mUILoadTestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UILoadTestListItem1 mUILoadTestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILoadTestListItem1 : WinListItem
    {
        
        public UILoadTestListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "LoadTest";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar1 UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar1(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar1 mUIMenuBarMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar1 : WinMenuBar
    {
        
        public UIMenuBarMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New      ";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow2 : WinWindow
    {
        
        public UISpreadsheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar2 UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar2(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UISpreadsheetGridWindow UISpreadsheetGridWindow
        {
            get
            {
                if ((this.mUISpreadsheetGridWindow == null))
                {
                    this.mUISpreadsheetGridWindow = new UISpreadsheetGridWindow(this);
                }
                return this.mUISpreadsheetGridWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar2 mUIMenuBarMenuBar;
        
        private UISpreadsheetGridWindow mUISpreadsheetGridWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar2 : WinMenuBar
    {
        
        public UIMenuBarMenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetGridWindow : WinWindow
    {
        
        public UISpreadsheetGridWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetGrid";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetGridClient
        {
            get
            {
                if ((this.mUISpreadsheetGridClient == null))
                {
                    this.mUISpreadsheetGridClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetGridClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetGridClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow3 : WinWindow
    {
        
        public UISpreadsheetWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "4";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGridWindow1 UISpreadsheetGridWindow
        {
            get
            {
                if ((this.mUISpreadsheetGridWindow == null))
                {
                    this.mUISpreadsheetGridWindow = new UISpreadsheetGridWindow1(this);
                }
                return this.mUISpreadsheetGridWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGridWindow1 mUISpreadsheetGridWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetGridWindow1 : WinWindow
    {
        
        public UISpreadsheetGridWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetGrid";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetGridClient
        {
            get
            {
                if ((this.mUISpreadsheetGridClient == null))
                {
                    this.mUISpreadsheetGridClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetGridClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetGridClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetWindow4 : WinWindow
    {
        
        public UISpreadsheetWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "5";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGridWindow2 UISpreadsheetGridWindow
        {
            get
            {
                if ((this.mUISpreadsheetGridWindow == null))
                {
                    this.mUISpreadsheetGridWindow = new UISpreadsheetGridWindow2(this);
                }
                return this.mUISpreadsheetGridWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIContentsBoxWindow1 UIContentsBoxWindow
        {
            get
            {
                if ((this.mUIContentsBoxWindow == null))
                {
                    this.mUIContentsBoxWindow = new UIContentsBoxWindow1(this);
                }
                return this.mUIContentsBoxWindow;
            }
        }
        
        public UIValueBoxWindow1 UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow1(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGridWindow2 mUISpreadsheetGridWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIContentsBoxWindow1 mUIContentsBoxWindow;
        
        private UIValueBoxWindow1 mUIValueBoxWindow;
        
        private UIA1Window1 mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetGridWindow2 : WinWindow
    {
        
        public UISpreadsheetGridWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetGrid";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetGridClient
        {
            get
            {
                if ((this.mUISpreadsheetGridClient == null))
                {
                    this.mUISpreadsheetGridClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetGridClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetGridClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetGridClient
        {
            get
            {
                if ((this.mUISpreadsheetGridClient == null))
                {
                    this.mUISpreadsheetGridClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetGridClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetGridClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetGridClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIContentsBoxWindow1 : WinWindow
    {
        
        public UIContentsBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentsBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsBoxEdit
        {
            get
            {
                if ((this.mUIContentsBoxEdit == null))
                {
                    this.mUIContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUIContentsBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIValueBoxWindow1 : WinWindow
    {
        
        public UIValueBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUIValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell:";
                    this.mUICellNameBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
}
